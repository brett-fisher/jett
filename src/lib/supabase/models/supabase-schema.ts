// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// THIS FILE IS AUTOMATICALLY GENERATED BY SUPABASE.
// DO NOT USE THESE TYPES DIRECTLY.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export type Database = {
  public: {
    Tables: {
      account_categories: {
        Row: {
          created_date: string;
          id: number;
          is_deleted: boolean;
          name: string;
          updated_date: string | null;
          user_id: number;
        };
        Insert: {
          created_date?: string;
          id?: number;
          is_deleted: boolean;
          name: string;
          updated_date?: string | null;
          user_id: number;
        };
        Update: {
          created_date?: string;
          id?: number;
          is_deleted?: boolean;
          name?: string;
          updated_date?: string | null;
          user_id?: number;
        };
        Relationships: [
          {
            foreignKeyName: 'account_categories_user_id_fkey';
            columns: ['user_id'];
            isOneToOne: false;
            referencedRelation: 'users';
            referencedColumns: ['id'];
          }
        ];
      };
      accounts: {
        Row: {
          account_category_id: number;
          created_date: string;
          id: number;
          is_private: boolean;
          name: string;
          tenant_id: number;
          updated_date: string | null;
          user_id: number;
        };
        Insert: {
          account_category_id: number;
          created_date?: string;
          id?: number;
          is_private?: boolean;
          name: string;
          tenant_id: number;
          updated_date?: string | null;
          user_id: number;
        };
        Update: {
          account_category_id?: number;
          created_date?: string;
          id?: number;
          is_private?: boolean;
          name?: string;
          tenant_id?: number;
          updated_date?: string | null;
          user_id?: number;
        };
        Relationships: [
          {
            foreignKeyName: 'accounts_account_category_id_fkey';
            columns: ['account_category_id'];
            isOneToOne: false;
            referencedRelation: 'account_categories';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'accounts_user_id_fkey';
            columns: ['user_id'];
            isOneToOne: false;
            referencedRelation: 'users';
            referencedColumns: ['id'];
          }
        ];
      };
      bills: {
        Row: {
          created_date: string;
          id: number;
          name: string;
          updated_date: string | null;
          user_id: number;
        };
        Insert: {
          created_date?: string;
          id?: number;
          name: string;
          updated_date?: string | null;
          user_id: number;
        };
        Update: {
          created_date?: string;
          id?: number;
          name?: string;
          updated_date?: string | null;
          user_id?: number;
        };
        Relationships: [
          {
            foreignKeyName: 'bills_user_id_fkey';
            columns: ['user_id'];
            isOneToOne: false;
            referencedRelation: 'users';
            referencedColumns: ['id'];
          }
        ];
      };
      tenants: {
        Row: {
          created_date: string;
          id: number;
          is_deleted: boolean | null;
          updated_date: string;
        };
        Insert: {
          created_date?: string;
          id?: number;
          is_deleted?: boolean | null;
          updated_date: string;
        };
        Update: {
          created_date?: string;
          id?: number;
          is_deleted?: boolean | null;
          updated_date?: string;
        };
        Relationships: [];
      };
      transaction_categories: {
        Row: {
          created_date: string;
          id: number;
          name: string;
          updated_date: string | null;
          user_id: number;
        };
        Insert: {
          created_date?: string;
          id?: number;
          name: string;
          updated_date?: string | null;
          user_id: number;
        };
        Update: {
          created_date?: string;
          id?: number;
          name?: string;
          updated_date?: string | null;
          user_id?: number;
        };
        Relationships: [
          {
            foreignKeyName: 'transaction_categories_user_id_fkey';
            columns: ['user_id'];
            isOneToOne: false;
            referencedRelation: 'users';
            referencedColumns: ['id'];
          }
        ];
      };
      transactions: {
        Row: {
          account_id: number;
          bill_id: number | null;
          created_date: string;
          id: number;
          transaction_category_id: number | null;
          updated_date: string | null;
        };
        Insert: {
          account_id: number;
          bill_id?: number | null;
          created_date?: string;
          id?: number;
          transaction_category_id?: number | null;
          updated_date?: string | null;
        };
        Update: {
          account_id?: number;
          bill_id?: number | null;
          created_date?: string;
          id?: number;
          transaction_category_id?: number | null;
          updated_date?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'transactions_account_id_fkey';
            columns: ['account_id'];
            isOneToOne: false;
            referencedRelation: 'accounts';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'transactions_bill_id_fkey';
            columns: ['bill_id'];
            isOneToOne: false;
            referencedRelation: 'bills';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'transactions_transaction_category_id_fkey';
            columns: ['transaction_category_id'];
            isOneToOne: false;
            referencedRelation: 'transaction_categories';
            referencedColumns: ['id'];
          }
        ];
      };
      users: {
        Row: {
          created_date: string;
          external_id: string;
          id: number;
          is_active: boolean;
          tenant_id: number;
          updated_date: string | null;
        };
        Insert: {
          created_date?: string;
          external_id: string;
          id?: number;
          is_active: boolean;
          tenant_id: number;
          updated_date?: string | null;
        };
        Update: {
          created_date?: string;
          external_id?: string;
          id?: number;
          is_active?: boolean;
          tenant_id?: number;
          updated_date?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'users_tenant_id_fkey';
            columns: ['tenant_id'];
            isOneToOne: false;
            referencedRelation: 'tenants';
            referencedColumns: ['id'];
          }
        ];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
};

type PublicSchema = Database[Extract<keyof Database, 'public'>];

export type Tables<
  PublicTableNameOrOptions extends
  | keyof (PublicSchema['Tables'] & PublicSchema['Views'])
  | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends {
    schema: keyof Database;
  }
  ? keyof (Database[PublicTableNameOrOptions['schema']]['Tables'] &
    Database[PublicTableNameOrOptions['schema']]['Views'])
  : never = never
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions['schema']]['Tables'] &
    Database[PublicTableNameOrOptions['schema']]['Views'])[TableName] extends {
      Row: infer R;
    }
  ? R
  : never
  : PublicTableNameOrOptions extends keyof (PublicSchema['Tables'] &
    PublicSchema['Views'])
  ? (PublicSchema['Tables'] &
    PublicSchema['Views'])[PublicTableNameOrOptions] extends {
      Row: infer R;
    }
  ? R
  : never
  : never;

export type TablesInsert<
  PublicTableNameOrOptions extends
  | keyof PublicSchema['Tables']
  | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends {
    schema: keyof Database;
  }
  ? keyof Database[PublicTableNameOrOptions['schema']]['Tables']
  : never = never
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions['schema']]['Tables'][TableName] extends {
    Insert: infer I;
  }
  ? I
  : never
  : PublicTableNameOrOptions extends keyof PublicSchema['Tables']
  ? PublicSchema['Tables'][PublicTableNameOrOptions] extends {
    Insert: infer I;
  }
  ? I
  : never
  : never;

export type TablesUpdate<
  PublicTableNameOrOptions extends
  | keyof PublicSchema['Tables']
  | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends {
    schema: keyof Database;
  }
  ? keyof Database[PublicTableNameOrOptions['schema']]['Tables']
  : never = never
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions['schema']]['Tables'][TableName] extends {
    Update: infer U;
  }
  ? U
  : never
  : PublicTableNameOrOptions extends keyof PublicSchema['Tables']
  ? PublicSchema['Tables'][PublicTableNameOrOptions] extends {
    Update: infer U;
  }
  ? U
  : never
  : never;

export type Enums<
  PublicEnumNameOrOptions extends
  | keyof PublicSchema['Enums']
  | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
  ? keyof Database[PublicEnumNameOrOptions['schema']]['Enums']
  : never = never
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions['schema']]['Enums'][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema['Enums']
  ? PublicSchema['Enums'][PublicEnumNameOrOptions]
  : never;

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
  | keyof PublicSchema['CompositeTypes']
  | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database;
  }
  ? keyof Database[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes']
  : never = never
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes'][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof PublicSchema['CompositeTypes']
  ? PublicSchema['CompositeTypes'][PublicCompositeTypeNameOrOptions]
  : never;
